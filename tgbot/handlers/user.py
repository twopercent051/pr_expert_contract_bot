import os

from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram import F, Router
from aiogram.fsm.context import FSMContext

from create_bot import bot
from tgbot.keyboards.inline import UserInlineKeyboard as inline_kb
from tgbot.misc.states import UserFSM
from tgbot.services.render import data_to_json

router = Router()


async def template_start(user_id: int | str):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞"
    kb = inline_kb.templ_type_kb(action="create")
    await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)


@router.message(Command('start'))
async def template_type(message: Message):
    await template_start(user_id=message.from_user.id)


@router.callback_query(F.data == "get_contract")
@router.callback_query(F.data == "home")
async def template_type(callback: CallbackQuery):
    await template_start(user_id=callback.from_user.id)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data.split(":")[0] == "create")
async def create_template(callback: CallbackQuery, state: FSMContext):
    template = callback.data.split(":")[1]
    await state.update_data(template=template)
    text = "üëá –ù—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
    await callback.message.answer(text)
    text = [
        "–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏ ||",
        "–ù–∞–∑–≤–∞–Ω–∏–µ –û–û–û ||",
        "–ü–æ–ª–Ω–æ–µ –§–ò–û (—Ä–æ–¥.–ø)||",
        "–ö—Ä–∞—Ç–∫–æ–µ –§–ò–û ||",
        "–°–∞–π—Ç ||",
        "–ö–æ–Ω—Ç. –ª–∏—Ü–æ ||",
        "–¢–ª—Ñ –∫–æ–Ω—Ç. –ª–∏—Ü–∞ ||",
        "Email –∫–æ–Ω—Ç. –ª–∏—Ü–∞ ||",
        "–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ ||",
        "–Æ—Ä. –∞–¥—Ä–µ—Å ||",
        "–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å ||",
        "–ò–ù–ù ||",
        "–ö–ü–ü ||",
        "–†. —Å—á—ë—Ç ||",
        "–ë–∞–Ω–∫ ||",
        "–ö–æ—Ä. —Å—á—ë—Ç ||",
        "–ë–ò–ö ||",
    ]
    if template in ["standard", "optima", "premium"]:
        text.append("–†–µ–≥–∏–æ–Ω ||")
    if template == "marketing":
        text.extend(["–û–ì–†–ù ||", "–û–ö–í–≠–î ||", "–†–µ–≥–∏–æ–Ω ||"])
    if template == "razovaya":
        text.extend(["–°—Ä–æ–∫ —Ä–∞–±–æ—Ç ||", "–†–µ–≥–∏–æ–Ω ||"])
    if template == "klasterizaciya":
        text.extend(["–°—Ä–æ–∫ —Ä–∞–±–æ—Ç ||", "–¶–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ ||", "–¢–µ–º–∞—Ç–∏–∫–∏ ||"])
        text.append("\n*–¢–µ–º–∞—Ç–∏–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
    text = '\n'.join(text)
    kb = inline_kb.home_kb()
    await state.set_state(UserFSM.template)
    await callback.message.answer(f"<code>{text}</code>", reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.message(F.text, UserFSM.template)
async def rendering(message: Message, state: FSMContext):
    state_data = await state.get_data()
    template = state_data["template"]
    file_name = data_to_json(template=template, data_str=message.text)
    if not file_name:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    await state.set_state(UserFSM.home)
    file_path = f'{os.getcwd()}/result.docx'
    file = FSInputFile(path=file_path, filename=f"{file_name}.docx")
    kb = inline_kb.home_kb()
    await bot.send_document(chat_id=message.from_user.id, document=file, reply_markup=kb)
    os.remove(file_path)

